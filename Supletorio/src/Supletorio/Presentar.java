/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Supletorio;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author Yulissa T
 */
public class Presentar extends javax.swing.JFrame {

    
    public Presentar() {
        initComponents();
        registrar();
    }
    Connection conexion = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        presentar = new javax.swing.JTextArea();
        btn_Nombre_Precio = new javax.swing.JButton();
        btn_Precio_Rango = new javax.swing.JButton();
        btn_Descuento = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        presentar.setColumns(20);
        presentar.setRows(5);
        jScrollPane1.setViewportView(presentar);

        btn_Nombre_Precio.setText("Mostrar Nombre y Precio");
        btn_Nombre_Precio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Nombre_PrecioActionPerformed(evt);
            }
        });

        btn_Precio_Rango.setText("Productos de Precio Entre 100 y 350");
        btn_Precio_Rango.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Precio_RangoActionPerformed(evt);
            }
        });

        btn_Descuento.setText("Descuento de Articulos");
        btn_Descuento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DescuentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_Descuento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Nombre_Precio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Precio_Rango))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btn_Nombre_Precio)
                        .addGap(28, 28, 28)
                        .addComponent(btn_Descuento)
                        .addGap(28, 28, 28)
                        .addComponent(btn_Precio_Rango)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_Nombre_PrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Nombre_PrecioActionPerformed
        cargarBase();
        try {
            Statement sentencia = conexion.createStatement();
            ResultSet registros = sentencia.executeQuery("SELECT * FROM ARTICULOS ");
            String lista = "";
            while (registros.next()) {
                String clave1 = registros.getString("codigo_articulo");
                String nombre = registros.getString("nombre");
                String precio = registros.getString("precio");

                lista = lista + clave1 + " | " + nombre + " |" + precio + "\n";
            }
            registros.close();
            conexion.close();
            presentar.setText(lista);
        } catch (SQLException sqlex) {
            System.out.println("Error" + sqlex);
        }
    }//GEN-LAST:event_btn_Nombre_PrecioActionPerformed

    private void btn_Precio_RangoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Precio_RangoActionPerformed
        cargarBase();
        try {
            Statement sentencia = conexion.createStatement();
            ResultSet registros = sentencia.executeQuery("SELECT * FROM ARTICULOS WHERE precio>100 and precio <350");
            String listaArticulos = "";
            while (registros.next()) {
                String codigo = registros.getString("codigo_articulo");
                String nombre = registros.getString("nombre");
                String precio = registros.getString("precio");
                String codigo_fa = registros.getString("clave_fabricante");

                listaArticulos = listaArticulos + codigo + " , " + nombre + " , " + precio + " , " + codigo_fa + "\n";
            }
            registros.close();
            conexion.close();
            presentar.setText(listaArticulos);
        } catch (SQLException SQLex) {
            System.out.println("Error" + SQLex);
        }
    }//GEN-LAST:event_btn_Precio_RangoActionPerformed

    private void btn_DescuentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DescuentoActionPerformed
        cargarBase();
        try {
            Statement sentencia = conexion.createStatement();
            ResultSet registros = sentencia.executeQuery("SELECT *FROM ARTICULOS WHERE precio>=450");
            String lista = "";
            while (registros.next()) {
                String codigo_art = registros.getString("codigo_articulo");
                String nombre = registros.getString("nombre");
                int precio = registros.getInt("precio");
                String codigo_fa = registros.getString("clave_fabricante");

                double p = precio - (precio * 0.1);
                lista = lista + codigo_art + " , " + nombre + " , " + precio + " , " + " El Descuento es: " + p + "\n";
            }
            registros.close();
            conexion.close();
            presentar.setText(lista);
        } catch (SQLException sqlex) {
            System.out.println("Error" + sqlex);
        }
    }//GEN-LAST:event_btn_DescuentoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Presentar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Presentar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Presentar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Presentar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Presentar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Descuento;
    private javax.swing.JButton btn_Nombre_Precio;
    private javax.swing.JButton btn_Precio_Rango;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea presentar;
    // End of variables declaration//GEN-END:variables

    public void registrar() {
        cargarBase();
        try {

            Statement sentencia = conexion.createStatement();
            ResultSet reg = sentencia.executeQuery("SELECT * FROM ARTICULOS ");
            String sqlInsertar = String.format("INSERT INTO ARTICULOS VALUES('%s', '%s', '%s', %d)",
                    "1", "Teclado", "3", 100);

            int registrar = sentencia.executeUpdate(sqlInsertar);

            sqlInsertar = String.format("INSERT INTO ARTICULOS VALUES('%s', '%s', '%s', %d)",
                    "2", "Disco duro 300 Gb", "5", 500);
            registrar = sentencia.executeUpdate(sqlInsertar);

            sqlInsertar = String.format("INSERT INTO ARTICULOS VALUES('%s', '%s', '%s', %d)",
                    "3", "Mouse", "3", 80);
            registrar = sentencia.executeUpdate(sqlInsertar);

            sqlInsertar = String.format("INSERT INTO ARTICULOS VALUES('%s', '%s', '%s', %d)",
                    "4", "Memoria USB", "4", 140);
            registrar = sentencia.executeUpdate(sqlInsertar);

            sqlInsertar = String.format("INSERT INTO ARTICULOS VALUES('%s', '%s', '%s', %d)",
                    "5", "Memoria RAM", "1", 290);
            registrar = sentencia.executeUpdate(sqlInsertar);

            sqlInsertar = String.format("INSERT INTO ARTICULOS VALUES('%s', '%s', '%s', %d)",
                    "6", "Disco duro ext. 250 Gb", 65, 650);
            registrar = sentencia.executeUpdate(sqlInsertar);

            sqlInsertar = String.format("INSERT INTO ARTICULOS VALUES('%s', '%s', '%s', %d)",
                    "7", "Memoria USB", "1", 279);
            registrar = sentencia.executeUpdate(sqlInsertar);

            sqlInsertar = String.format("INSERT INTO ARTICULOS VALUES('%s', '%s', '%s', %d)",
                    "8", "DVD Rom", "2", 450);
            registrar = sentencia.executeUpdate(sqlInsertar);

            sqlInsertar = String.format("INSERT INTO ARTICULOS VALUES('%s', '%s', '%s', %d)",
                    "9", "CD Rom", "2", 200);
            registrar = sentencia.executeUpdate(sqlInsertar);

            sqlInsertar = String.format("INSERT INTO ARTICULOS VALUES('%s', '%s', '%s', %d)",
                    "10", "Tarjeta de red", "3", 180);
            registrar = sentencia.executeUpdate(sqlInsertar);

            sqlInsertar = String.format("INSERT INTO FABRICANTES VALUES('%s', '%s')",
                    "1", "Kingston");
            registrar = sentencia.executeUpdate(sqlInsertar);

            sqlInsertar = String.format("INSERT INTO FABRICANTES VALUES('%s', '%s')",
                    "2", "Adata");
            registrar = sentencia.executeUpdate(sqlInsertar);
            
            sqlInsertar = String.format("INSERT INTO FABRICANTES VALUES('%s', '%s')",
                    "3", "Logitech");
            registrar = sentencia.executeUpdate(sqlInsertar);
            
            sqlInsertar = String.format("INSERT INTO FABRICANTES VALUES('%s', '%s')",
                    "4", "Lexmark");
            registrar = sentencia.executeUpdate(sqlInsertar);
            
            sqlInsertar = String.format("INSERT INTO FABRICANTES VALUES('%s', '%s')",
                    "5", "Seagate");
            registrar = sentencia.executeUpdate(sqlInsertar);

            reg.close();
            conexion.close();

        } catch (SQLException sql) {
            System.out.println("A Ocurrido un ERROR" + sql);
        }
    }

    public void cargarBase() {

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
            System.out.println(" El Driver cargado.");
        } catch (ClassNotFoundException cnfe) {
            System.out.println("Error al cargar Driver " + cnfe);
        }

        try {
            String url = "jdbc:derby://localhost:1527/ARTICULOS ";
            conexion = DriverManager.getConnection(url, "administrador", "admin");
            System.out.println(" La Conexion se ha Establecida");
        } catch (SQLException sqle) {
            System.out.println("Error al establecer conexion a la Base de Datos " + sqle);
        }
    }
}
